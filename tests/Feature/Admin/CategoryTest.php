<?php

namespace Tests\Feature\Admin;

use App\Models\Category;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class CategoryTest extends TestCase
{
    /**
     * A basic feature test example.
     */
    use WithFaker;

    private User $admin;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->admin = User::factory()->create([
            'name' => $this->faker()->name,
            'email' => $this->faker()->email,
            'password' => $this->faker()->password,
            'role' => 'admin'
        ]);
    }

    public function test_can_store_category()
    {
        Storage::fake('public');

        $categoryData = [
            'title' => $this->faker()->sentence(3),
            'image' => UploadedFile::fake()->image($this->faker()->word() . '.jpg'),
        ];
        $this->actingAs($this->admin)
            ->post(route('admin.categories.store'), $categoryData);

        $this->assertDatabaseHas('categories', [
            'title' => $categoryData['title'],
            'image' => $categoryData['image']->name
        ]);
        Storage::disk('public')->assertExists('images/categories/' . $categoryData['image']->name);
        Storage::fake('public');

    }

    public function test_can_update_category()
    {

        Storage::fake('public');

        $oldImage = UploadedFile::fake()->image($this->faker()->word() . '.jpg');
        $category = Category::factory()->create([
            'title' => $this->faker()->sentence(3),
            'image' => $oldImage,
        ]);

        $newImage = UploadedFile::fake()->image($this->faker()->word() . '.png');
        $newCategoryData = [
            'title' => $this->faker()->sentence(3),
            'image' => $newImage,
        ];


        $this->actingAs($this->admin)
            ->put(route('admin.categories.update', $category->id), $newCategoryData);
        $this->assertDatabaseMissing('categories', [
            'title' => $category->title,
            'image' => $oldImage->name
        ]);
        $this->assertDatabaseHas('categories', [
            'title' => $newCategoryData['title'],
            'image' => $newCategoryData['image']->name
        ]);

        Storage::disk('public')->assertMissing('images/categories/' . $oldImage->name);
        Storage::disk('public')->assertExists('images/categories/' . $newCategoryData['image']->name);
        Storage::fake('public');

    }
}
