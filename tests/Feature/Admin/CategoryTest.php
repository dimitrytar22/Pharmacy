<?php

namespace Tests\Feature\Admin;

use App\Models\Category;
use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class CategoryTest extends TestCase
{
    /**
     * A basic feature test example.
     */
    use RefreshDatabase, WithFaker;

    private User $admin;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->admin = User::factory()->create([
            'name' => 'Test name',
            'email' => 'example@mail.com',
            'password' => 'password12321321321@',
            'role' => 'admin',
        ]);
    }

    public function test_can_store_category()
    {
        Storage::fake('public');

        $categoryData = [
            'title' => 'someTitle123',
            'image' => UploadedFile::fake()->image('someImageName.jpg'),
        ];
        $this->actingAs($this->admin)
            ->post(route('admin.categories.store'), $categoryData);

        $this->assertDatabaseHas('categories', [
            'title' => $categoryData['title'],
            'image' => 'images/categories/' . $categoryData['image']->name,
        ]);
        Storage::disk('public')->assertExists('images/categories/' . $categoryData['image']->name);
        Storage::fake('public');

    }

    public function test_can_update_category()
    {

        Storage::fake('public');

        $oldImage = UploadedFile::fake()->image('someImageName.jpg');
        $category = Category::factory()->create([
            'title' => 'someTitle123',
            'image' => $oldImage,
        ]);

        $newImage = UploadedFile::fake()->image('someImageName2.jpg');
        $newCategoryData = [
            'title' => 'someTitle123',
            'image' => $newImage,
        ];

        $this->actingAs($this->admin)
            ->put(route('admin.categories.update', $category->id), $newCategoryData);
        $this->assertDatabaseMissing('categories', [
            'title' => $category->title,
            'image' => $oldImage->name,
        ]);
        $this->assertDatabaseHas('categories', [
            'title' => $newCategoryData['title'],
            'image' => 'images/categories/' . $newCategoryData['image']->name,
        ]);

        Storage::disk('public')->assertMissing('images/categories/' . $oldImage->name);
        Storage::disk('public')->assertExists('images/categories/' . $newCategoryData['image']->name);
        Storage::fake('public');

    }

    public function test_category_can_be_soft_deleted()
    {
        $category = Category::factory()->create();
        $this->actingAs($this->admin)
            ->delete(route('admin.categories.destroy', $category->id));

        $this->assertSoftDeleted('categories', $category->toArray());

    }

    public function test_category_can_be_force_deleted()
    {
        Storage::fake('public');
        $category = Category::factory()->create();
        $this->actingAs($this->admin)
            ->delete(route('admin.categories.forceDestroy', $category->id));

        $this->assertDatabaseMissing('categories', $category->toArray());
        Storage::fake('public');
    }

    public function test_image_isnt_deleted_from_storage_when_two_categories_have_the_same_image_and_one_category_is_force_deleted()
    {
        Storage::fake('public');

        $image = UploadedFile::fake()->image('someImageName.jpg');

        $category1 = Category::factory()->create([
            'title' => 'someTitle123',
            'image' => 'images/categories/' . $image->name,
        ]);
        $category2 = Category::factory()->create([
            'title' => 'someTitle1232123123',
            'image' => 'images/categories/' . $image->name,
        ]);

        $image->storeAs('images/categories/', $image->name);

        $this->actingAs($this->admin)
            ->delete(route('admin.categories.forceDestroy', $category1->id));
        Storage::disk('public')->assertExists($category2->image);

        Storage::fake('public');
    }

    public function test_image_is_deleted_from_storage_when_category_is_force_deleted()
    {
        Storage::fake('public');

        $image = UploadedFile::fake()->image('someImageName.jpg');

        $category = Category::factory()->create([
            'title' => 'someTitle123',
            'image' => 'images/categories/' . $image->name,
        ]);

        $image->storeAs('images/categories/', $image->name);

        $this->actingAs($this->admin)
            ->delete(route('admin.categories.forceDestroy', $category->id));
        Storage::disk('public')->assertMissing($category->image);

        Storage::fake('public');
    }

    public function test_category_id_value_removes_from_products_when_category_is_force_deleted()
    {
        $category = Category::factory()->create();
        $product = Product::factory()->create([
            'title' => 'some title',
            'instruction' => 'some instruction',
            'category_id' => $category->id,
            'price' => 11,
            'count' => 111,
        ]);

        $this->actingAs($this->admin)
            ->delete(route('admin.categories.forceDestroy', $category->id));
        $this->assertDatabaseMissing('categories', [
            'id' => $category->id
        ]);
        $this->assertDatabaseHas('products', [
            'id' => $product->id,
            'category_id' => null
        ]);
    }
}
