<?php

namespace Tests\Feature\Admin;

use App\Models\Category;
use App\Models\Feature;
use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Tests\TestCase;

class ProductTest extends TestCase
{

    use RefreshDatabase;

    private User $admin;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->admin = User::factory()->create([
            'name' => 'Test name',
            'email' => 'example@mail.com',
            'password' => 'password12321321321@',
            'role' => 'admin',
        ]);
    }

    public function test_can_store_product(): void
    {
        Storage::fake('public');
        $category = Category::factory()->create();
        $featuresData = [
            [
                'title' => "Some title1",
                'description' => 'Some description1'
            ],
            [
                'title' => "Some title2",
                'description' => 'Some description2'
            ]
        ];
        $productData = [
            'title' => "Some title1123",
            'instruction' => "Some instruction123",
            'features' => $featuresData,
            'image' => UploadedFile::fake()->image('someImage.png'),
            'category_id' => $category->id,
            'count' => 100,
            'price' => 12500
        ];
        $this->actingAs($this->admin)
            ->post(route('admin.products.store'), $productData);


        $this->assertDatabaseHas('products', [
            'title' => "Some title1123",
            'instruction' => "Some instruction123",
            'image' => "images/products/" . $productData['image']->name,
            'category_id' => $category->id,
            'count' => 100,
            'price' => 12500
        ]);
        Storage::disk('public')->assertExists("images/products/" . $productData['image']->name);
        Storage::fake('public');
    }


    public function test_can_update_product(): void
    {
        Storage::fake('public');
        Category::factory()->create();

        $product = Product::factory()->create();
        $newCategory = Category::factory()->create();


        $productData = [
            'title' => "Some title1123",
            'instruction' => "Some instruction123",
            'image' => UploadedFile::fake()->image('someImage.png'),
            'category_id' => $newCategory->id,
            'count' => 100,
            'price' => 12500
        ];
        $this->actingAs($this->admin)
            ->put(route('admin.products.update', $product->id), $productData);


        $this->assertDatabaseHas('products', [
            'id' => $product->id,
            'title' => "Some title1123",
            'instruction' => "Some instruction123",
            'image' => "images/products/" . $productData['image']->name,
            'category_id' => $newCategory->id,
            'count' => 100,
            'price' => 12500
        ]);
        Storage::disk('public')->assertExists("images/products/" . $productData['image']->name);
        Storage::fake('public');
    }

    public function test_can_soft_delete_product(): void
    {
        Category::factory()->create();

        $product = Product::factory()->create();

        $this->actingAs($this->admin)
            ->delete(route('admin.products.destroy', $product->id));

        $this->assertSoftDeleted('products', $product->toArray());
    }

    public function test_product_can_have_features()
    {
        Category::factory()->create(); //needed for product factory
        $feature1 = Feature::factory()->create();
        $feature2 = Feature::factory()->create();
        $product = Product::factory()->create();

        $product->features()->attach([$feature1->id, $feature2->id]);
        $this->assertDatabaseHas('product_features', [
            'product_id' => $product->id,
            'feature_id' => $feature1->id
        ]);
        $this->assertDatabaseHas('product_features', [
            'product_id' => $product->id,
            'feature_id' => $feature2->id
        ]);
    }

    public function test_can_find_product_by_prompt()
    {
        $category = Category::factory()->create();
        $product = Product::factory()->create([
            'title' => 'Some product title',
            'price' => 111,
            'instruction' => 'Some instruction...',
            'category_id' => $category->id,
            'count' => 999,
            'image' => 'image.png'
        ]);
        $prompt = Str::substr($product->title,0,3);

        $response = $this->actingAs($this->admin)
            ->post(route('admin.products.search', [
                'prompt' => $prompt
            ]));
        $response->assertJsonPath('error', null);

    }


}
